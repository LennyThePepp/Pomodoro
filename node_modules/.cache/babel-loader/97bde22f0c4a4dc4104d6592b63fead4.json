{"ast":null,"code":"var _jsxFileName = \"/Users/chriskile/Desktop/react/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport PlayPauseStop from \"./PlayPauseStop\";\nimport Display from \"./Display\";\nimport BreakAndFocus from \"./BreakAndFocus\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  _s();\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const handleFocusIncrease = () => setFocusDuration(Math.min(60, focusDuration + 5));\n\n  const handleFocusDecrease = () => setFocusDuration(Math.max(5, focusDuration - 5));\n\n  const handleBreakIncrease = () => setBreakDuration(Math.min(15, breakDuration + 1));\n\n  const handleBreakDecrease = () => setBreakDuration(Math.max(1, breakDuration - 1));\n\n  const handleStop = () => {\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Pomodoro\",\n    children: [/*#__PURE__*/_jsxDEV(BreakAndFocus, {\n      session: session,\n      focusDuration: focusDuration,\n      breakDuration: breakDuration,\n      handleFocusDecrease: handleFocusDecrease,\n      handleFocusIncrease: handleFocusIncrease,\n      handleBreakDecrease: handleBreakDecrease,\n      handleBreakIncrease: handleBreakIncrease\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayPauseStop, {\n      isTimerRunning: isTimerRunning,\n      handleStop: handleStop,\n      session: session,\n      playPause: playPause\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      session: session,\n      focusDuration: focusDuration,\n      breakDuration: breakDuration,\n      isTimerRunning: isTimerRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Pomodoro, \"gD7N3Vr/3gYtJlq7FBMoaudlkbA=\", false, function () {\n  return [useInterval];\n});\n\n_c = Pomodoro;\nexport default Pomodoro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pomodoro\");","map":{"version":3,"sources":["/Users/chriskile/Desktop/react/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","PlayPauseStop","Display","BreakAndFocus","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","handleFocusIncrease","min","handleFocusDecrease","handleBreakIncrease","handleBreakDecrease","handleStop","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport PlayPauseStop from \"./PlayPauseStop\";\nimport Display from \"./Display\";\nimport BreakAndFocus from \"./BreakAndFocus\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25)\n  const [breakDuration, setBreakDuration] = useState (5);\n\n  const handleFocusIncrease = () =>\n    setFocusDuration(Math.min(60,focusDuration + 5));\n  \n  const handleFocusDecrease = () =>\n    setFocusDuration(Math.max(5,focusDuration - 5));\n    \n  const handleBreakIncrease = () =>\n    setBreakDuration(Math.min(15, breakDuration + 1));\n    \n  const handleBreakDecrease = () => \n    setBreakDuration(Math.max(1, breakDuration - 1));\n    \n  const handleStop = () =>{\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setIsTimerRunning(false);\n    setSession(null);\n  } \n  \n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className = \"Pomodoro\">\n      <BreakAndFocus\n          session = {session}\n          focusDuration = {focusDuration}\n          breakDuration = {breakDuration}\n          handleFocusDecrease = {handleFocusDecrease}\n          handleFocusIncrease = {handleFocusIncrease}\n          handleBreakDecrease = {handleBreakDecrease}\n          handleBreakIncrease = {handleBreakIncrease}\n      />\n\n      <PlayPauseStop\n          isTimerRunning = {isTimerRunning}\n          handleStop = {handleStop}\n          session = {session}\n          playPause = {playPause}\n      />\n\n      <Display\n          session = {session}\n          focusDuration = {focusDuration}\n          breakDuration = {breakDuration}\n          isTimerRunning = {isTimerRunning}\n        />\n\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}