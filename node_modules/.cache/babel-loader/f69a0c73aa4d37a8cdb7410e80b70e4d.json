{"ast":null,"code":"import _slicedToArray from\"/Users/chriskile/Desktop/react/Project_Pomodoro_Timer_Qualified_1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/chriskile/Desktop/react/Project_Pomodoro_Timer_Qualified_1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useState}from\"react\";import useInterval from\"../utils/useInterval\";import PlayPauseStop from\"./PlayPauseStop\";import Display from\"./Display\";import BreakAndFocus from\"./BreakAndFocus\";// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function nextTick(prevState){var timeRemaining=Math.max(0,prevState.timeRemaining-1);return _objectSpread(_objectSpread({},prevState),{},{timeRemaining:timeRemaining});}/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */function nextSession(focusDuration,breakDuration){/**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */return function(currentSession){if(currentSession.label===\"Focusing\"){return{label:\"On Break\",timeRemaining:breakDuration*60};}return{label:\"Focusing\",timeRemaining:focusDuration*60};};}function Pomodoro(){// Timer starts out paused\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isTimerRunning=_useState2[0],setIsTimerRunning=_useState2[1];// The current session - null where there is no session running\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),session=_useState4[0],setSession=_useState4[1];// ToDo: Allow the user to adjust the focus and break duration.\nvar _useState5=useState(25),_useState6=_slicedToArray(_useState5,2),focusDuration=_useState6[0],setFocusDuration=_useState6[1];var _useState7=useState(5),_useState8=_slicedToArray(_useState7,2),breakDuration=_useState8[0],setBreakDuration=_useState8[1];var handleFocusIncrease=function handleFocusIncrease(){return setFocusDuration(Math.max(60,focusDuration+5));};var handleFocusDecrease=function handleFocusDecrease(){return setFocusDuration(Math.min(5,focusDuration-5));};var handleBreakIncrease=function handleBreakIncrease(){return setBreakDuration(Math.max(15,breakDuration+1));};var handleBreakDecrease=function handleBreakDecrease(){return setBreakDuration(Math.min(1,breakDuration-1));};var handleStop=function handleStop(){setFocusDuration(25);setBreakDuration(5);setIsTimerRunning(false);setSession(null);};/**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */useInterval(function(){if(session.timeRemaining===0){new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();return setSession(nextSession(focusDuration,breakDuration));}return setSession(nextTick);},isTimerRunning?1000:null);/**\n   * Called whenever the play/pause button is clicked.\n   */function playPause(){setIsTimerRunning(function(prevState){var nextState=!prevState;if(nextState){setSession(function(prevStateSession){// If the timer is starting and the previous session is null,\n// start a focusing session.\nif(prevStateSession===null){return{label:\"Focusing\",timeRemaining:focusDuration*60};}return prevStateSession;});}return nextState;});}return/*#__PURE__*/_jsxs(\"div\",{className:\"Pomodoro\",children:[/*#__PURE__*/_jsx(BreakAndFocus,{session:session,focusDuration:focusDuration,breakDuration:breakDuration,handleFocusDecrease:handleFocusDecrease,handleFocusIncrease:handleFocusIncrease,handleBreakDecrease:handleBreakDecrease,handleBreakIncrease:handleBreakIncrease}),/*#__PURE__*/_jsx(PlayPauseStop,{isTimerRunning:isTimerRunning,handleStop:handleStop,session:session,playPause:playPause}),/*#__PURE__*/_jsx(Display,{session:session,focusDuration:focusDuration,breakDuration:breakDuration,isTimerRunning:isTimerRunning})]});}export default Pomodoro;","map":{"version":3,"sources":["/Users/chriskile/Desktop/react/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","PlayPauseStop","Display","BreakAndFocus","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","handleFocusIncrease","handleFocusDecrease","min","handleBreakIncrease","handleBreakDecrease","handleStop","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport PlayPauseStop from \"./PlayPauseStop\";\nimport Display from \"./Display\";\nimport BreakAndFocus from \"./BreakAndFocus\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25)\n  const [breakDuration, setBreakDuration] = useState (5);\n\n  const handleFocusIncrease = () =>\n    setFocusDuration(Math.max(60,focusDuration + 5));\n  \n  const handleFocusDecrease = () =>\n    setFocusDuration(Math.min(5,focusDuration - 5));\n    \n  const handleBreakIncrease = () =>\n    setBreakDuration(Math.max(15, breakDuration + 1));\n    \n  const handleBreakDecrease = () => \n    setBreakDuration(Math.min(1, breakDuration - 1));\n    \n  const handleStop = () =>{\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setIsTimerRunning(false);\n    setSession(null);\n  } \n  \n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className = \"Pomodoro\">\n      <BreakAndFocus\n          session = {session}\n          focusDuration = {focusDuration}\n          breakDuration = {breakDuration}\n          handleFocusDecrease = {handleFocusDecrease}\n          handleFocusIncrease = {handleFocusIncrease}\n          handleBreakDecrease = {handleBreakDecrease}\n          handleBreakIncrease = {handleBreakIncrease}\n      />\n\n      <PlayPauseStop\n          isTimerRunning = {isTimerRunning}\n          handleStop = {handleStop}\n          session = {session}\n          playPause = {playPause}\n      />\n\n      <Display\n          session = {session}\n          focusDuration = {focusDuration}\n          breakDuration = {breakDuration}\n          isTimerRunning = {isTimerRunning}\n        />\n\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}