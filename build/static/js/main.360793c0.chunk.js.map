{"version":3,"sources":["pomodoro/PlayPauseStop.js","utils/class-names/index.js","utils/duration/index.js","pomodoro/Display.js","pomodoro/BreakAndFocus.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["PlayPauseStop","classNameToBoolean","isTimerRunning","handleStop","session","playPause","className","role","type","title","onClick","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","disabled","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","Display","focusDuration","breakDuration","label","timeRemaining","style","height","width","BreakAndFocus","handleFocusDecrease","handleFocusIncrease","handleBreakDecrease","handleBreakIncrease","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","min","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.360793c0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from '../utils/class-names';\n\n\nfunction PlayPauseStop({isTimerRunning, handleStop, session, playPause}){\n\n     return( \n      <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                \"oi-media-play\": !isTimerRunning,\n                \"oi-media-pause\": isTimerRunning,\n              })}\n            />\n          </button>\n          {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n          {/* TODO: Disable the stop button when there is no active session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"stop\"\n            title=\"Stop the session\"\n            onClick={handleStop}\n            disabled={!session}\n          >\n            <span className=\"oi oi-media-stop\" />\n          </button>\n        </div>\n      </div>\n    </div>\n     )}\n     export default PlayPauseStop;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nfunction Display({\n    session,\n    focusDuration,\n    breakDuration,\n    isTimerRunning,\n  }){\n      return(\n        session && (\n            <>\n              <div className=\"row mb-2\">\n                <div className=\"col\">\n                  <h2 data-testid=\"session-title\">\n                    {session?.label} for{' '}\n                    {session?.label === 'Focusing'\n                      ? minutesToDuration(focusDuration)\n                      : minutesToDuration(breakDuration)}{' '}\n                    minutes\n                  </h2>\n                  <p className=\"lead\" data-testid=\"session-sub-title\">\n                    {secondsToDuration(session?.timeRemaining)} remaining\n                  </p>\n                  {!isTimerRunning && <h2>PAUSED</h2>}\n                </div>\n              </div>\n              <div className=\"row mb-2\">\n                <div className=\"col\">\n                  <div className=\"progress\" style={{ height: '20px' }}>\n                    <div\n                      className=\"progress-bar\"\n                      role=\"progressbar\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                      aria-valuenow={\n                        100 -\n                        (100 * session.timeRemaining) /\n                          (session.label === 'Focusing'\n                            ? focusDuration * 60\n                            : breakDuration * 60)\n                      }\n                      style={{\n                        width: `${\n                          100 -\n                          (100 * session.timeRemaining) /\n                            (session.label === 'Focusing'\n                              ? focusDuration * 60\n                              : breakDuration * 60)\n                        }%`,\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </>\n          )\n      )\n    \n}\nexport default Display","import React from 'react';\nimport { minutesToDuration } from '../utils/duration';\n\nfunction BreakAndFocus({\n  session,\n  focusDuration,\n  breakDuration,\n  handleFocusDecrease,\n  handleFocusIncrease,\n  handleBreakDecrease,\n  handleBreakIncrease,\n}) {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                onClick={handleFocusDecrease}\n                disabled={session || focusDuration === 5}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                onClick={handleFocusIncrease}\n                disabled={session || focusDuration === 60}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={handleBreakDecrease}\n                  disabled={session || breakDuration === 1}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={handleBreakIncrease}\n                  disabled={session || breakDuration === 15}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\nexport default BreakAndFocus","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport PlayPauseStop from \"./PlayPauseStop\";\nimport Display from \"./Display\";\nimport BreakAndFocus from \"./BreakAndFocus\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25)\n  const [breakDuration, setBreakDuration] = useState (5);\n\n  const handleFocusIncrease = () =>\n    setFocusDuration(Math.max(60,focusDuration + 5));\n  \n  const handleFocusDecrease = () =>\n    setFocusDuration(Math.min(5,focusDuration - 5));\n    \n  const handleBreakIncrease = () =>\n    setBreakDuration(Math.max(15, breakDuration + 1));\n    \n  const handleBreakDecrease = () => \n    setBreakDuration(Math.min(1, breakDuration - 1));\n    \n  const handleStop = () =>{\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setIsTimerRunning(false);\n    setSession(null);\n  } \n  \n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className = \"Pomodoro\">\n      <BreakAndFocus\n          session = {session}\n          focusDuration = {focusDuration}\n          breakDuration = {breakDuration}\n          handleFocusDecrease = {handleFocusDecrease}\n          handleFocusIncrease = {handleFocusIncrease}\n          handleBreakDecrease = {handleBreakDecrease}\n          handleBreakIncrease = {handleBreakIncrease}\n      />\n\n      <PlayPauseStop\n          isTimerRunning = {isTimerRunning}\n          handleStop = {handleStop}\n          session = {session}\n          playPause = {playPause}\n      />\n\n      <Display\n          session = {session}\n          focusDuration = {focusDuration}\n          breakDuration = {breakDuration}\n          isTimerRunning = {isTimerRunning}\n        />\n\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}